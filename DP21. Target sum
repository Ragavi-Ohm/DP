int findTargetSumWays(vector<int>& nums, int target) {
        int n=nums.size();
        int tot=0;
        for(int i=0;i<n;i++)
            tot+=nums[i];
        
        if(tot-target<0)return 0;
        if((tot-target)%2!=0) return 0;
        int sum=(tot-target)/2;
        vector<vector<int>>dp(n,vector<int>(sum+1,0));
        for(int i=0;i<n;i++)
            dp[i][0]=1;
        if(nums[0]<=sum)
            dp[0][nums[0]]=1;
        if(nums[0]==0)
            dp[0][0]=2;
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<=sum;j++)
            {
                int notpick=dp[i-1][j];
                int pick=0;
                if(nums[i]<=j)
                    pick=dp[i-1][j-nums[i]];
                dp[i][j]=pick+notpick;
            }
        }
        return dp[n-1][sum];
        
    }
